#%Module
set-function	nqrun {
    env_vars=();
    srun_args=();
    requirements_file="";
    py_script_path="";
    bash_script="";
    python_module="";
    source_code_dir="D1";
    python_env="";
    should_delete_venv=true;
    function help () 
    { 
        printf " Usage: nqrun [OPTIONS] [SRUN-OPTIONS] PYTHON_SCRIPT\n";
        printf "\n";
        printf " Run quantum computing jobs on SLURM-managed high-perfromance computers (HPC)\n";
        printf " Note that it prompts for API token\n";
        printf "\n";
        printf " Options:\n";
        printf "  %-20s\t%s\n" "--env list" "Set environment variables like Var1=Value1";
        printf "  %-20s\t%s\n" "--requirements string" "Text file containing python dependencies in requirements.txt format";
        printf "  %-20s\t%s\n" "--python string" "Python module to load with 'module load [python module]'";
        printf "  %-20s\t%s\n" "--source-code-dir string" "the folder that stores source code on login node; default=D1";
        printf "  %-20s\t%s\n" "--virtual-env string" "the folder containing the virtual env to create if not exists and use for this job";
        printf "\n";
        printf " srun options:\n";
        srun --help
    };
    while [[ $# -gt 0 ]]; do
        case $1 in 
            --env)
                env_vars+=("$2");
                shift;
                shift
            ;;
            --requirements)
                requirements_file="$2";
                shift;
                shift
            ;;
            --python)
                python_module="$2";
                shift;
                shift
            ;;
            --source-code-dir)
                source_code_dir="$2";
                shift;
                shift
            ;;
            --virtual-env)
                python_env="$2";
                should_delete_venv=false;
                shift;
                shift
            ;;
            -h | --help)
                help;
                return 0
            ;;
            *)
                if [ -z "$2" ]; then
                    py_script_path="$1";
                else
                    srun_args+=("$1");
                fi;
                shift
            ;;
        esac;
    done;
    if [ -z "$py_script_path" ]; then
        echo "the last argument should be the path to the python script";
        exit 1;
    fi;
    read -s -r -p "Enter a valid QAL 9000 API token: " qal9000_api_token;
    if [ -n "$qal9000_api_token" ]; then
        env_vars+=("QAL9000_API_TOKEN='$qal9000_api_token'");
    else
        echo "QAL 9000 API token cannot be empty";
        exit 1;
    fi;
    if [ -z "$python_env" ]; then
        python_env="$source_code_dir/nqenv";
    fi;
    bash_script="${py_script_path%%\.py}$(date +%s).sh";
    function prepare_python_env () 
    { 
        if [ -n "$python_module" ]; then
            module load $python_module;
        fi;
        python -m venv "$python_env";
        source "$python_env/bin/activate";
        if [ -n "$requirements_file" ]; then
            pip install -r $requirements_file;
        else
            pip install tergite;
        fi
    };
    function generate_bash_script () 
    { 
        echo "#!/bin/bash" >> $bash_script;
        for env_var in "${env_vars[@]}";
        do
            echo "export $env_var;" >> $bash_script;
        done;
        echo "python $py_script_path;" >> $bash_script;
        for env_pair in "${env_vars[@]}";
        do
            env_key="${env_pair%%=*}";
            echo "unset $env_key;" >> $bash_script;
        done
    };
    function cleanup () 
    { 
        if $should_delete_venv; then
            rm -r "$python_env";
            echo "";
        fi;
        rm $bash_script
    };
    prepare_python_env;
    generate_bash_script;
    chmod +x $bash_script;
    srun $(for arg in ${srun_args[@]}; do printf "%s " "$arg"; done) $bash_script;
    cleanup;
    return 0}
